@page "/business-copy"
@using OpenAI_POC.Helper
@using OpenAI_POC.Service
@inject IOpenAIService OpenAIService
@inject IJSRuntime JS
<div class="container my-3">
    <h3 class="mb-4">📝 Business Copy Generator</h3>
    <div class="row mb-3">
        <div class="col-md-4 mb-2">
            <input class="form-control" placeholder="Company Name" @bind="companyName" />
        </div>
        <div class="col-md-4 mb-2">
            <select class="form-select" @bind="tone">
                <option value="">Select Tone</option>
                @foreach (var t in toneOptions)
                {
                    <option value="@t">@t</option>
                }
            </select>
        </div>
    </div>

    <div class="mb-3">
        <textarea class="form-control" rows="4" placeholder="Company Description" @bind="description"></textarea>
    </div>

    <button class="btn btn-primary mb-3" @onclick="GenerateCopy" disabled="@isLoading">
        @(isLoading ? "Generating..." : "Generate Copy")
    </button>

    @if (!string.IsNullOrWhiteSpace(resultMarkdown))
    {
        <div class="card mt-3">
            <div class="card-header fw-bold">📋 Generated Copy Preview</div>
            <div class="card-body markdown-body">
                @((MarkupString)MarkdownHelper.ToHtml(resultMarkdown))
            </div>
        </div>

        <div class="mt-3">
            <button class="btn btn-outline-success me-2" @onclick="ExportAsMarkdown">
                📥 Export as .md
            </button>
            <button class="btn btn-outline-secondary" @onclick="ExportAsText">
                📥 Export as .txt
            </button>
        </div>
    }

</div>

@code {
    private string companyName = string.Empty;
    private string description = string.Empty;
    private string tone = string.Empty;
    private string resultMarkdown = string.Empty;
    private bool isLoading = false;

    private List<string> toneOptions = new()
    {
        "Professional",
        "Friendly",
        "Witty",
        "Bold",
        "Inspirational",
        "Casual"
    };

    private async Task ExportAsMarkdown()
    {
        await ExportFileAsync("business-copy.md", resultMarkdown, "text/markdown");
    }

    private async Task ExportAsText()
    {
        await ExportFileAsync("business-copy.txt", resultMarkdown, "text/plain");
    }

    private async Task ExportFileAsync(string filename, string content, string contentType)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(content);
        using var stream = new MemoryStream(bytes);

        using var streamRef = new Microsoft.JSInterop.DotNetStreamReference(stream);

        await JS.InvokeVoidAsync("downloadFileFromStream", filename, streamRef);
    }

    private async Task GenerateCopy()
    {
        if (string.IsNullOrWhiteSpace(companyName) ||
            string.IsNullOrWhiteSpace(description) ||
            string.IsNullOrWhiteSpace(tone))
        {
            resultMarkdown = "Please fill all fields.";
            return;
        }

        isLoading = true;
        resultMarkdown = string.Empty;

        var prompt =
            $"Generate business marketing content in a {tone} tone for a company.\n\n" +
            $"Company Name: {companyName}\n" +
            $"Description: {description}\n\n" +
            "Include:\n" +
            "- A catchy tagline\n" +
            "- A short About Us section\n" +
            "- 3 sample social media ad captions\n\n" +
            "Format everything in Markdown.";


        try
        {
            resultMarkdown = await OpenAIService.CreateChatResponse(prompt);
        }
        catch (Exception ex)
        {
            resultMarkdown = $"Error: {ex.Message}";
        }

        isLoading = false;
    }
}
